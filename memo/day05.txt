day05
제어문 -> 연산자 -> DOM 제어

1. 제어문
	자바와 동일
1) 조건문	
	if문 -> 관계연산자로 조건 비교할 때
	switch문 -> 하나의 변수에 여러 값이 담길 수 있을 때
2) 반복문
	for문 -> 반복횟수나 범위를 알 때
	while문 -> 반복횟수를 알지 못할 때, 조건이 주어졌을 때
	do ~ while문 -> 무조건 한 번 실행 한 뒤 조건에 따라 반복할 때

3) 기타제어문
	break문 -> 반복문 강제 탈출, switch문에서 case마다 종료할 때
	continue문 -> 다음 반복으로 넘어갈 때

+) 별찍기와 같은 코드를 작성 시 규칙성을 확인한다
	이중 for문 사용하며 바깥 for문 항상 행, 안쪽 for문은 항상 열이라는 것을 생각한다

2. 대화상자
1) alert()	
	알림상자
	메시지를 사용자에게 알리는 역할을 한다
	사용자가 메시지를 확인하고 확인 버튼을 누르기 전까지는 웹 페이지의 다른 동작을 멈춘다
	- 경고 메시지, 오류 알림, 성공 메시지 등을 보여줄 때 사용한다

2) confirm()
	확인상자
	사용자에게 예/아니오를 묻는 역할을 한다
	확인과 취소 버튼이 있으며 사용자의 선택에 따라 true 또는 false 값을 반환한다
	- 특정 작업을 계속할 지 여부를 물을 때 사용한다

3) prompt()
	입력 상자
	사용자에게 값을 입력받는 역할을 한다
	사용자에게 메시지와 입력창을 보여주며 사용자가 입력한 내용을 문자열로 반환한다
	- 사용자 이름이나 간단한 정보를 입력받을 때 사용한다

3. 연산자(Operator)
1) 최우선연산자
	자바와 동일
	() .	

2) 단항연산자
	자바와 동일
	연산자를 기준으로 피 연산자(항1개)가 1개인것을 의미	

- 증감연산자
	++, --
- 양수, 음수
	+, -
- not
	!

3) 이항연산자
	연산자를 기준으로 피 연산자(항2개)가 2개인것을 의미

- 산술연산자(+, -, *, /, %)
	자바와 동일
	+ 문자와 문자 연결, 문자와 숫자 연결, 숫자와 숫자와 문자 => 숫자끼리 연산 문자열 연결
	  숫자와 숫자 연산
	
- 할당연산자
	자바와 동일
	+=, -=, *=, /=, %=

- 쉬프트연산자
	자바와 동일
	<< , >>, ~
	피연산자 >> 비트수 : 피연산자를 명시한 비트수만큼 이동시킨다

- 관계연산자
	자바와 동일
	>, <, >=, <=

	==	동등비교 연산자, 값만 같은지 비교
	===	일치비교 연산자, 값과 타입이 같은지 비교
	'1' == 1	true
	'1' === 1	false

	!=	부등비교 연산자, 값만 다른지 비교
	!== 	불일치 비교 연산자, 값과 타입이 다른지 비교

- 논리연산자
	자바와 동일
	||, &&, !

	??	병합연산자		null 또는 undefined인 경우에만 오른쪽 값을 반환한다
	?.	옵셔널체이닝(Optional Chanining)
		객체에서 undefined나 null에 접근할 경우 에러가 발생한다
		안전하게 객체의 프로퍼티에 접근하기 위해서 사용한다

- 대입연산자
	자바와 동일
	=

4. 객체(Obeject)
	여러 데이터를 하나의 묶음으로 저장하는데 사용한다
	속성(property)과 메소드(method)를 가진다
	객체는 데이터를 체계적으로 관리하는데 유용하다
	
	속성 : 객체의 상태를 나타내는 데이터 key:value 형태로 작성
	메소드 : 객체가 수행할 수 있는 동작을 나타내는 함수

1) 객체 생성
	객체 리터럴을 이용한 생성이고 객체 리터럴은 {}을 이용하여 표현한다
	
	let test = {
		num1: 10,
		num2: 20,
		name: '신짱구',
		sum: funtion(){
			return this.num1 + this.num2;
		}
	}

2) 객체 사용
	객체의 프로퍼티에 접근하는 방법은 2가지가 있다
	- .을 이용한다
		console.log(test.num1); //10
	- []를 이용한다(key를 반드시 ''로 감싸야한다)
		console.log(test['num2']); //20


3) 프로퍼티 생성과 삭제
	객체를 생성하고 이후에 객체 내부에 프로퍼티를 생성하거나 삭제하는 것이 가능하다
	- 생성	객체에 존재하지 않는 키에 값을 저장한다
		test.num3 = 3.5;

	- 삭제	delete를 사용한다
		delete test.num3;

5. 함수(Function)
	코드 블록으로 감싸져 있는 문으로 이루어진 하나의 실행 단위
	자바스크립트의 함수 일급객체이다(일급객체 : 값으로 사용할 수 있는 것을 의미)
	즉, 함수는 객체 타입의 값이며 변수에 저장하거나 매개변수로 전달하거나 반환하는 것이 가능하다

- 함수의 규칙
	함수는 동작하나만 담당해야한다(모듈화)
	함수는 함수 이름에 언급되어 있는 동작을 정확히 수행해야한다, 그 이외의 동작은 수행해서는 안된다
	독립적인 두개의 동작은 독립된 함수 두개에서 나눠서 수행할 수 있게 해야한다

1) 일반함수
	function 식별자(매개변수1, 매개변수2){
		실행할 코드
		return 리턴값;
	}

- 용어
	function	함수 선언 표시
	식별자		함수의 기능을 의미할 수 있는 동사로 작성
	parameter	매개변수(인자), 여러개 있을 때는 콤마로 분리하고 자료형을 따로 작성하지 않는다
	return		함수 실행 종료 후 리턴값을 반환한다

- 함수 호출 방식
	매개변수	리턴값	호출방식
	x	x	식별자();
	o	x	식별자(인수);
	x	o	출력(식별자());
	o	o	출력(식별자(인수));

- 동적바인딩 : 컴파일 시 값에 따라 자료형이 동적으로 결정되는 것을 의미한다

2) 익명함수 ★★★★
	이름이 없는 함수이며 보통 변수에 저장해서 사용한다

	let 변수명 = function (매개변수){
		실행할코드;
		return 반환값;
	}

- 함수 호출
	변수명();	//매개변수x, 리턴값x
	출력(변수명(인수)); //매개변수o, 리턴값o

3) 콜백함수(Callback Function) ★★★
	함수의 매개변수로 전달되는 함수를 의미한다(다른 함수의 매개변수로 전달되어 실행되는 함수를 의미한다)
	모듈화를 시키기 위해 원하는 곳에서 실행할 사용한다(재사용성)
	비동기작업, 재사용성, 모듈화를 위해서 사용한다

- 콜백지옥 : 콜백함수의 단점
	콜백을 과도하게 중첩하면 코드가 복잡해지고 가독성이 떨어지는 콜백 지옥이 발생할 수 있다

- 콜백함수의 대안 : Promise와 async/await
	코드의 가독성을 높이고 비동기 작업을 체계적으로 처리할 수 있게 한다

4) 즉시 실행함수
	한번만 사용하는 함수는 즉시 실행함수로 만들어 사용한다
	즉시 실행함수는 만듦과 동시에 실행이 된다
	재사용할 목적이 없으므로 익명함수로 만든다

	(function (매개변수){
		실행할코드;
	})(매개변수로 넘겨줄 값);

5) 화살표 함수 ★★★★★
	익명함수를 더 편하게 만들 수 있는 표기법(자바 람다식 유사)

	() => {}

- 자바 람다식 (함수형 프로그래밍을 사용)
	함수형인터페이스 일 때만 사용 가능하다
	() -> {}

6) 재귀함수
	자기자신을 호출하는 함수






















