day06
DOM 제어 -> 이벤트 처리 -> 바이브코딩을 통한 메인페이지, 로그인, 회원가입 페이지

1. DOM
1) DOM(Document Object Model)
	html 태그들을 하나씩 객체화 한 것을 의미한다
	html 페이지 내용과 모양을 제어하기 위해 사용하는 객체이며 html 태그당 DOM 객체가 하나씩 생성된다
	html 태그의 포함관계에 따라서 부모, 자식, 형제 관계로 구성된다
	html 요소들을 모두 노드(node)라는 객체로 구조화한다

2) DOM API
	DOM을 다루기 위한 프로그래밍 인터페이스(메소드, 속성 등)
	브라우저가 제공하는 JAVASCRIPT 객체/메소드 집합
	ex) document.getElementById(), document.querySelect(), element.innerHTML 등,..

3) DOM Tree 구조
	문서 구조를 트리(Tree)형태로 표현한 것
	최상위 노드 : document
	주요노드 : 요소노드(Element Node) - HTML 태그
		속성노드(Attribute Node) - 태그 속성
		텍스트노드(Text Node) - 텍스트 컨텐츠

	<body>
	  <div id="box">div box</div>
	</body>

	document	브라우저가 제공하는 최상위 객체
	|_ html		요소노드
	    |_ body	요소노드
		|_div(id="box")	div요소노드, id="box" div 요소의 속성 노드로 존재하지만 일반적으로 div노드의 속성처럼 표현됨
			|_ div box	div텍스트노드
	
	<body>
	  <ul id="menu">
	    <li class="item">home</li>
	    <li class="item">about</li>
       	  </ul>
	</body>

	documnet
	|_ html
	   |_body
	     |_ ul (id="menu")
		|_ li (class="item")
		|  |_"home" 텍스트 노드
		|_ li (class="item")
		   |_ "about" 텍스트 노드

3. DOM 요소 선택(Selector 종류)
1) 메소드
	메소드명					반환형태		의미
	getElementById("id명")			단일요소객체	id명으로 선택
	getElementsByClassName("class명")	HTMLCollection 	클래스명으로 여러 요소 선택
	getElementsByTagName("tag명")		HTMLCollection	특정 태그명으로 모든 요소 선택
	getElementsByName("name명")		NodeList	name 속성 기준으로 선택(주로 form 요소에서 사용)
	querySelector("선택자")			첫번째 일치요소	css선택자를 이용해 가장 먼저 일치하는 요소 선택
	querySelectorAll("선택자")		NodeList	css선택자를 이용해 일치하는 모든 요소 선택

+) HTMLCollection과 NodeList
			HTMLCollection			NodeList
	업데이트		실시간반영(Live) -> DOM이 바뀌면	정적(Static) 스냅샷 -> 생성 시점 기준으로 고정
			자동으로 업데이트
	포함노드		요소노드(Element)만 포함		요소 + 텍스트노드, 주석노드도 포함 가능
	배열 메소드	배열 메소드(forEach, map등) 사용불가	일부 배열 메소드(forEach)사용가능
	인덱스접근		가능(배열처럼 [인덱스번호])		가능
	반복문사용		for, for ... of 가능		for, for ... of, forEach 가능
	변경감지		DOM 변경 시 자동 반영		변경사항 반영되지 않음

+) CSS 선택자
- 기본선택자
	태그명
	#아이디명
	.클래스명

- 조합선택자
	태그.클래스명
	태그#아이디명

- 자식선택자
	태그 태그

- 후손선택자
	태그 > 태그

- 형제 선택자
	태그 + 태그	인접형제선택자
	태그 ~ 태그	일반형제선택자

- 속성선택자
	태그명[속성명]
	태그명[속성명=값]

- 가상클래스/가상요소선택자
	태그:hover 	마우스를 올렸을때
	input:focus	포커스 된 입력요소
	li:first-child	첫번째 자식
	li:last-child	마지막 자식
	li:nth-child(2) 2번째 자식

4. DOM 요소 조작
	요소의 내용을 조작할 때 사용하는 속성

1) innerHTML
	요소의 내부 HTML을 나타내는 속성
	HTML 태그를 포함한 요소의 내용을 변경할 수 있다
	ex) const test = document.getElementById("test");
		test.innerHTML = "<strong>안녕</strong>";	//태그로 인식

2) innerText
	요소의 텍스트 내용을 나타내는 속성
	HTML 태그를 고려하지 않고 텍스트 내용만 조작할 수 있다
	ex) const test = document.getElementById("test");
		test.innerHTML = "<strong>안녕</strong>";	//문자열

3) 속성조작
	setAttribute("속성명", "값") 	: 속성 설정
	getAttribute("속성명")		: 속성 가져오기
	removeAttribute("속성명")		: 속성 삭제하기

4) 스타일 조작
	element.style.속성명 = "값"
	속성명을 카멜 표기법으로 사용한다
	ex) background-color => backgroundColor
	
	this.setAttribute('style', 'background-color':'색상');
	
5. 바이브 코딩(Vibe Coding)
	개발자가 생성형 인공지능의 도움을 받아 코드를 작성하는 행위
	결과물을 만들어내는 주체와 주도권이 사람보다 생성형 인공지능에 있다

1) 주요 도구
	github Copilot : GitHub와 OpenAI가 공동 개발한 AI 코딩도구
	Cursor : 코파일럿을 통해서 AI 기반 코드 생성기가 핫하니 다른 여러 회사들이 코파일럿과 유사한 ai 코드 생성기 만든 것 중 하나
	Codex : OpenAI에서 개발한 AI코딩 에이전트
	Cemini
	Claude Code
	...

2) 진행 단계
- HTML 뼈대 작성
	Index.html : 로그인버튼, 회원가입버튼, 메인페이지
	signup.html : 회원가입 폼
	login.html : 로그인 폼

- CSS 스타일링
	반응형 카드 레이아웃, 중앙 정렬

- JS 이벤트 처리
	회원정보를 확인할 수 있는 이벤트(입력이 다 되지 않았으면 아래쪽에 빨간 글씨 띄워주기)
	버튼위에 마우스 올렸을 때 색상 변경

- 페이지 연결
	회원가입 -> 로그인 페이지로 이동
	로그인 -> 메인 페이지로 이동
	로그아웃 -> 로그인 페이지로 이동































